<!--
    System configuration.
 -->

<system>

    <!--
      =============================================================================================
      =============================================================================================
      CENTRAL CONFIGURATIONS
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Session management
      type = "URL"/"COOKIE" (default is "URL")
      This definition must be in sync with the tracking-mode definition in
      the web.xml file!
      *************************************************************************
    <sessionmanagement
        type="URL"
    />  
    -->

    <!--
      *************************************************************************
      Configuration of startup. You may define a class name supporting 
      interface IStartUp - an instance is created after the CaptainCasa
      has initialized, then the interface is processed on this instance.
      
      Result: you can add some own code to the startup - which is not bound
      to any request coming from the browser side.
      
      Pay attention: the startup is NOT executed in the request/response
      processing of a client request! It is executed out of the scope of
      UI roundtrip.
      *************************************************************************
     <startupclass
        name="xxx.yyy.zzz.ApplicationStartUp"
     />
     -->

    <!--
      *************************************************************************
      Configuration of access to user
          optional: name of class providing IUserAccess interface
      If not defined then DefaultUserAccess is used.
      *************************************************************************
     -->
    <!--
     <useraccess
        name="org.eclnt.jsfserver.util.useraccess.DefaultUserAccess"
     />
     -->
     
    <!--
      *************************************************************************
      Configuration of access to tenant
          optional: name of class providing ITenantAccess interface
      If not defined then DefaultTenantAccess is used.
      *************************************************************************
     -->
    <!--
     <tenantaccess
        name="org.eclnt.jsfserver.util.useraccess.DefaultTenantAccess"
     />
     -->
     
    <!--
      =============================================================================================
      =============================================================================================
      CONFIGURATION OF STARTING PAGE OF RISC CLIENT
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Configuration of RISCStarter - the servlet that is responding on .risc
      request.
      
      pageicon: optional
      title: optional
      versionstampclassname: optional
      *************************************************************************
     <riscstarter
        pageicon="eclnt/images/icon.png"
        title="CaptainCasa Enterprise Client - RISC-HTML"
        versionstampclassname="<class name of IVersionStamp implementation>"
     />
     -->

    <!--
      *************************************************************************
      Additional javascript includes in RISC client
      *************************************************************************
     -->
    <!--
    <riscclientscript src="xxx/yyy/zzzz.js" type="text/javascript" /> 
    <riscclientscript src="aaa/bbb/ccc.js" type="text/javascript"/> 
     -->
     
    <!--
      *************************************************************************
      Additional styles includes in RISC client
      *************************************************************************
     -->
    <!--
    <riscclientstyle src="xxx/yyy/zzzz.css"/> 
    <riscclientstyle src="aaa/bbb/ccc.css"/> 
     -->

    <!--
      *************************************************************************
      Additional meta tags 
      *************************************************************************
     -->
     
    <!--
    <riscclientmetatag name="..." httpequiv="..." content="..."/> 
    <riscclientmetatag name="..." httpequiv="..." content="..."/> 
     -->
     
    <!--
      *************************************************************************
      Additional font access 
      For proper calculation of font sizes it is "good" if this font is
      touched as early as possible. Corresponding HTML code will be added
      into the start page.
      *************************************************************************
     -->
     
    <!--
    <riscclientfontaccess face="...nameOfFont..."/> 
    <riscclientfontaccess face="...nameOfFont..." size="10"/> 
     -->
     
    <!--
      =============================================================================================
      =============================================================================================
      CONFIGURATION OF STREAM STORE
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Configuration of stream store persistency.
      *************************************************************************
     -->
    <!--
    Example: this is the default: file based, in servlet temp diractory
    <streamstore 
        name="org.eclnt.jsfserver.streamstore.StreamStoreFile" 
    />
    
    Example: with explicit directory location
    <streamstore 
        name="org.eclnt.jsfserver.streamstore.StreamStoreFile" 
        rootdir="c:/streamstoredir"
    />
    
    Example: via JDBC; you need to provide a JDBC
    provider as well (class implementing IJDBCConnectionProvider).
    <streamstore 
        name="org.eclnt.jsfserver.streamstore.StreamStoreJDBC" 
    />
    <jdbcconnectionprovider
        name="demostreamstore.DemoConnectionProvider" 
    />
     -->
     
    <!--
      =============================================================================================
      =============================================================================================
      CONFIGURATION FOR DEDICATED CONTROLS
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      CALENDARFIELD: Configuration of extended calendar functions
      *************************************************************************
     -->
    <!--
     <extcalendarmgr 
        name="org.eclnt.jsfserver.calendar.ExtCalendarMgr"
     />
     -->
     
    <!--
      *************************************************************************
      FIXGRID: Configuration of general fixgrid attributes
          optional: persistence = class name of IFIXGRIDPersistence(2) implementation
          optional: exportcharagersetcsv, exportcharactersetxml = Export format for csv and xml export
      *************************************************************************
     -->
    <!--
     <fixgrid
        persistence="org.eclnt.jsfserver.util.fixgridpersistence.DefaultFIXGRIDPersistence"
        exportcharactersetcsv="UTF-8"
        exportcharactersetxml="UTF-8"
     />
     -->
     
    <!--
     **************************************************************************
     Configruation for persistzing dialog positions
     **************************************************************************
     -->     
    <!--
    <dialogs persistenceenabled="true" useworkpageidaspersistid="true"/> 
    -->
     
     <!--
      *************************************************************************
      Workplace configuration
      
      withhistory - (optional) a history of invoked functions is stored per user
      implicitloadingforcurrentuser - (optional) avoid the implicit loading of the 
      user specficic workplace data (function tree, history) because the
      loading is explicitly done by the application (e.g. after logon of
      the user to the system)
      *************************************************************************
     -->
     <!--
     <workplace
          workpagestarter="...className of IWorkpageStarter implementation..." 
          withhistory="false"
          implicitloadingforcurrentuser="true"
          />
      -->
      
    <!--
      =============================================================================================
      =============================================================================================
      SECURITY RELATED CONFIGURATIONS
      =============================================================================================
      =============================================================================================
     --> 
     
     <!--
      *************************************************************************
      Resource path security configuration
      
      Resources that may be potencially read from outside are checked
      against a list of extensions. Example: resources that are read via
      "ccclresource" URL, resources in the area of image management.
      There is a basic list of extensions which is managed in class 
      ResourceSecurity and which includes image file name exensions, and
      basic html resources.
      *************************************************************************
     -->
     <!--
     <resourcesecurity additionalextensions="doc;xls;docx;xlsx"/>
     -->

    <!--
     **************************************************************************
     SECURITY configuration: File Manager access, allowed directories
     All access inside the CaptainCasa server processing is done through the
     FileManager class. This class allows the configuration of directories that
     are defined for write/read access (write access includes read access).
     
     There are the following variables available:
     ${temp} => File temp directory
     ${servlettemp} => Temp directory provided by the servlet container
     ${servletwebapp} => Directory of the deployed web application (only available
                         with certain application servers!)
                         
     The File Manager security is switched on, if at least one definition is
     done. 
     **************************************************************************
     -->
     
    <!--
     **************************************************************************
     Security filter configuration
     The security filter can be extended by implementing the interface
     SecurityFilter.IExtension. The extension class can be defined here.
     The class must provide a constructor without parameters.
     **************************************************************************
    <securityfilter extensionclassname="yourclassname"/>
     -->     
     
     <!--
        Access required by CaptainCasa processing:
      -->
     <!-- 
     <filemanagerreadaccess directory="${servletwebapp}"/>
     <filemanagerwriteaccess directory="${temp}"/>
     <filemanagerwriteaccess directory="${servlettemp}"/>
     -->
     
     <!--
        Own definitions (examples):
      -->
     <!--
     <filemanagerreadaccess directory="c:\temp"/>
     <filemanagerreadaccess directory="d:\temp"/>
     <filemanagerreadaccess directory="/temp/myapp"/>
     <filemanagerwriteaccess directory="/temp/myapp/write"/>
     -->
     
    <!--
     **************************************************************************
     Checking of incoming and outgoing values
     **************************************************************************
     -->     
    <!--
    <checkinboundandoutboundvalues name="...className..."/>
     -->

    <!--
     **************************************************************************
     Configuration for servlets and filters
     **************************************************************************
     -->     
     
    <!--
    <servletconfiguration classname="org.eclnt.jsfserver.bufferedcontent.BufferedContentServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.bufferedcontent.UploadContentServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.bufferedcontent.ExtCalendarServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.clientliteralloader.ClientLiteralServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.htfileupload.FileUploadServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.polling.LongPollingServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.util.AutoCompleteServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.util.CLResourceAccessServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.util.ImageSizeServlet" blockget="false"/> 
    <servletconfiguration classname="org.eclnt.jsfserver.util.SessionInvalidationServlet" blockget="false"/> 
    <filterconfiguration classname="org.eclnt.jsfserver.util.ThreadingFilter" blockget="false"/>
    -->
    
    <!--
      =============================================================================================
      =============================================================================================
      OTHER CONFIGURATIONS
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Server image manager.
      *************************************************************************
     -->
    <!--
     <serverimagemanager
        imagereaderclassname="...implementation class of IImageReader..."
        extimagefilterclassname="...implementation of class IExtImageFilter..."
     />
     -->
     
    <!--
      *************************************************************************
      List of class names of IDynamicPageProvider implementations.
      *************************************************************************
     -->
    <!--
     <dynamicpages>
         <dynamicpageprovider name="xxxx.yyyy"/>
     </dynamicpages>
     -->
     
    <!--
      =============================================================================================
      =============================================================================================
      CONFIGURATION OF STARTING OF JAVA SWING/FX CLIENT
      (not relevant for RISC Client processing!)
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Default templates that are used for building the .html / .jnlp
      file when resolving a .ccapplet/.ccwebstart request. If not specified
      then default values will be chosen.
      THIS IS A CONFIGURATION THAT ONLY IS USED WITHIN THE JAVA SWING/FX CLIENT
      PROCESSING. IT IS NOT USED FOR THE RISC-WEB-CLIENT ANYMORE.
      *************************************************************************
     -->
    <!--
    <starttemplates 
        ccapplet="org/eclnt/jsfserver/starter/applettemplate.html"
        ccwebstart="org/eclnt/jsfserver/starter/webstarttemplate.jnlp"
        ccrisc="org/eclnt/jsfserver/starter/risctemplate.html"
    />
     -->
     
    <!--
      *************************************************************************
      Default libraries that are loaded via the default .ccapplet / .ccwebstart
      procedure. This is the default for the cclibs value that normally
      is appended to the .ccapplet/.ccwebstart URL.
      THIS IS A CONFIGURATION THAT ONLY IS USED WITHIN THE JAVA SWING/FX CLIENT
      PROCESSING. IT IS NOT USED FOR THE RISC-WEB-CLIENT ANYMORE.
      *************************************************************************
     -->
    <!--
    <ccappletccwebstart 
        cclibs="all"
        splashimage="eclnt/images/splash.png">
        <clientparam name="loglevel" value="INFO"/>
        <clientparam name="xxx" value="yyy"/>
    </ccappletccwebstart>
     -->
     
    <!--
      =============================================================================================
      =============================================================================================
      RARELY USED CONFIGRUATIONS...
      =============================================================================================
      =============================================================================================
     --> 
     
    <!--
      *************************************************************************
      Factory for creating instances of popups
      Class name must implement interface IPopupCreator
      *************************************************************************
     --> 
    <!--
    <popupcreator name="...className..."/>
     -->
     
    <!--
      *************************************************************************
      Name of SAXParserFactory that is used internally for all SAXParsing.
      If not specified then a default SAX Parser will be selected (crimson).
      If using CaptainCasa together with other frameworks (e.g. Spring)
      you might use the Xerces parser as default.
      Background: the parser that is included in the JRE has some ugly
      bugs, so we open up the usage of the parser. 
      *************************************************************************
     -->
    <!-- Example:
    <saxparserfactory name="org.apache.xerces.jaxp.SAXParserFactoryImpl"/>
     -->
     
    <!--
      *************************************************************************
      Included pages are buffered once being read from the web context.
      You can switch off this buffering by setting active to false.
      Default value if not defined is true.
      *************************************************************************
     -->    
    <!--
    <layoutbuffer active="true"/>
     -->    
    
    <!--
     **************************************************************************
     Configruation of ht-component management
     
     sessiontimeoutpage - If defined then this page is the one that the
     server processing redirects the browser to. The page MUST start with
     a leading slash "/" and must reside within the webcontent of your 
     application.
     THIS IS A CONFIGURATION THAT ONLY IS USED WITHIN THE JAVA SWING/FX CLIENT
     PROCESSING. IT IS NOT USED FOR THE RISC-WEB-CLIENT ANYMORE.
     **************************************************************************
     -->     
    <!--
     <ht sessiontimeoutpage="/somepage.html"
     />
     -->
    
    <!--
     **************************************************************************
     Non JSF requests are requests from controls, that are executed in parallel
     to the normal JSF requests. Example: AUTOCOMPLETE, FILEUPLOAD,...
     These requests send a an encoded query string ("strange" characters encoded
     as escaped characters). On server side it is not 100% clear if the 
     servlet container runtime directly interprets them as UTF8 characters or
     as ISO-8859-1 characters (which seems to be the default).
     Set the value explicitutf8conversion to "false" when no explicit conversion
     from ISO-8859-1 to UTF8 is required within your server environment.
     **************************************************************************
     -->
    <!--
     <nonjsfrequests explicitutf8conversion="true"/>
     -->

    <!--
     *************************************************************************
     Session state management (serialization)
     usecontainer: default "false", if set to "true" then the save-state
     management of the container will be used for saving the component tree.
     Otherwise the CaptainCasa state management will be used (which is 
     optimized for sticky sessions)
     *************************************************************************
     -->
    <!--
     <sessionstatemanagement usecontainer="false"
     />
     -->
     
    <!--
      *************************************************************************
      Encode name of jsessionid: sometimes it is required that the
      URL encoding that includes the sessionid into the URL is done
      not by the servlet container but by own functions. In this case by
      default ";jsessionid=xxxx" is appended to a URL. You can change the
      name of the word "jsessionid" corresponding to your environment.
      *************************************************************************
     -->
    <!--
     <encodenamejsessionid name="jsessionid"/>
     />
     -->
     
 </system>